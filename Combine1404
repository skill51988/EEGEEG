#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Apr 14 11:22:46 2022

@author: hayun
"""

import numpy as np
import matplotlib.pyplot as plt

import pandas as pd
import mne
import os
import glob

bads0 = [['F8', 'Fc2', 'C3', 'F2', 'Afz', 'Pz', 'C6', 'FC4', 'P6', 'TP8', 'Poz', 'Oz', 'Fpz', 'AF3', 'Cp2'],['Fc2', 'C4', 'C3', 'F2', 'Afz', 'FC4', 'Oz', 'C6', 'TP8', 'Fz'],['Fc2', 'C4', 'C3', 'Fc6', 'F8', 'F7', 'Afz', 'P4', 'FC4', 'F2', 'PO4', 'Oz', 'TP8', 'C6', 'P6', 'Fpz', 'AF3', 'Pz'],['C4', 'Fc2', 'C3', 'Afz', 'F2', 'FC4', 'Oz', 'TP8', 'C6', 'P6', 'Pz', 'O2', 'Fpz', 'P4', 'AF3'],['C4', 'C3', 'Fc6', 'Fc2', 'Cp2', 'P4', 'Afz', 'F2', 'Pz', 'Fpz', 'AF3', 'FC4', 'C6', 'TP8', 'PO3', 'Oz', 'PO4'],['Afz', 'O1', 'P4', 'F2', 'TP8', 'C6', 'PO3', 'PO4', 'AF3', 'Fpz', 'Pz', 'C4', 'Fc2', 'T4'],['Fc2', 'C4', 'Afz', 'AF3', 'P4', 'Fpz', 'Pz', 'T6', 'C6', 'FC4', 'TP8', 'PO4', 'PO3', 'F8'],['Fc2', 'C4', 'Afz', 'T6', 'Pz', 'FC4', 'Fpz', 'AF3', 'P4', 'C6', 'TP8', 'PO3', 'PO4']]
bads1 = [['Fpz', 'AF3', 'Fc5', 'C3', 'Cp1', 'Cp5', 'T6', 'Afz', 'FT7', 'P5', 'PO3', 'C1', 'C2', 'Fz', 'FC3'],['F3', 'Fc5', 'C3', 'T3', 'Fp2', 'Cp5', 'Cp1', 'FT7', 'Afz', 'T6', 'T5', 'O1', 'F1', 'PO3', 'C1'],['F3','Fc5','C3', 'Cp5', 'Cp1', 'FT7', 'T6', 'T5', 'PO3', 'P5', 'TP8', 'C1', 'C5', 'Pz', 'P3', 'F1', 'FC3', 'F6', 'T3', 'Fc6','Fz'],['Poz', 'PO3', 'P5', 'C1', 'FT7', 'F1', 'FC3', 'Afz', 'F6', 'T5', 'T6', 'C3', 'T4', 'Cp5', 'Cp1', 'Fc5', 'F3', 'T3', 'Fc6', 'Fz', 'Pz', 'O2', 'TP8', 'Fp1', 'C5'],['F3', 'Cp5', 'Fc5', 'Cp1', 'T6', 'T5', 'FT7', 'Poz', 'C5', 'C1', 'F6', 'FC3', 'F1', 'O2', 'T3', 'T4', 'Fc6', 'Fz', 'Fp2', 'Fp1', 'C3', 'C4'],['F3', 'Fc5', 'Cp5', 'Cp1', 'Cp6', 'FT7', 'Afz', 'T6', 'T5', 'Fcz', 'C1', 'Poz', 'T3', 'Fc6', 'F1', 'FC3', 'F6', 'C5'],['Fc5', 'F3', 'Cp6', 'T4', 'Cp5', 'T6', 'Afz', 'FT7', 'Poz', 'C1', 'Fcz', 'C5', 'F1', 'FC3', 'F6', 'T3', 'Fc6', 'Fp1'],['Fc5', 'F3', 'Fz', 'T4', 'Cp6', 'FT7', 'Fcz', 'Afz', 'T6', 'C1', 'Poz', 'F1', 'C5', 'T3']]
bads2 = [['F3', 'Cp1', 'Cp5', 'Cp2', 'T6', 'F1', 'F6', 'Fcz', 'O2', 'FT8', 'C6', 'CP3', 'TP8', 'T5'],['F3', 'T6', 'O2', 'F1', 'F6', 'Fcz', 'PO4', 'TP8', 'CP3', 'FT8', 'C6'],['F3', 'Fc2', 'T6', 'F1', 'F6', 'P4', 'CP3', 'FT8', 'TP8', 'PO4', 'O2'],['F3', 'Fz', 'Cp1', 'F1', 'F6', 'P4', 'O2', 'T6', 'FT8', 'PO4', 'CP3', 'TP8', 'C5', 'Fc2'],['F3', 'Fc2', 'Cp5', 'Cp2', 'Cp1', 'Fz', 'F6', 'O2', 'Pz', 'F1', 'CP3', 'PO4', 'FT8', 'C5', 'T5', 'P4', 'T6'],['F3', 'Fc2', 'O2', 'T5', 'F6', 'Fcz', 'PO4', 'P5', 'TP8', 'CP3', 'FT8', 'T6', 'Fz'],['F3', 'O2', 'T6', 'T5', 'F1', 'F6', 'PO4', 'TP8', 'CP3', 'FT8', 'P5', 'Fc2', 'Cp1', 'Fcz'],['Fc2', 'F3', 'Cp1', 'F1', 'T6', 'O2', 'T5', 'FT8', 'CP3', 'P5', 'PO4', 'Oz', 'TP8']]
bads3 = [['Fc2', 'P4'],['Fc2', 'Pz', 'P4'],['Fc2', 'P4', 'C2'],['Fc2', 'F4', 'P4', 'C2', 'P2'],['Fc2', 'Afz'],['Fc5', 'Fc2', 'C2', 'Poz', 'Oz'],['Fc5', 'Fc2'],['Fc5', 'Fc2', 'F1', 'C2', 'Oz']]
bads4 = [['Fc6', 'T3', 'Cp5', 'T6', 'T5', 'Fcz', 'C5'],['Fc6', 'T3', 'Cp5', 'T6', 'T5', 'Fcz', 'C5', 'Fp1'],['T3', 'Cp5', 'Fc6', 'T5', 'T6', 'C5', 'Fcz', 'P2', 'O1', 'Fp1'],['T3', 'Cp5', 'Fc6', 'T6', 'T5', 'Fcz', 'FC3', 'P6', 'C5'],['Fc6', 'Cp5', 'T3', 'T6', 'T5', 'FC3', 'P6', 'C5', 'Fcz'],['Fc6', 'T3', 'Cp5', 'T5', 'T6', 'FC3', 'Fcz', 'P6', 'C5'],['Fc6', 'T3', 'Cp5', 'T6', 'T5', 'FC3', 'Fcz', 'P6', 'C5'],['Fc6', 'T3', 'Cp5', 'FC3', 'T6', 'T5', 'C5', 'Fcz', 'C2', 'Cpz', 'P6', 'P2']]
bads5 = [['P3', 'P1', 'P2', 'P4'],['P4', 'P3', 'Pz', 'P1', 'P2'],['P3', 'P4', 'P1', 'P2'],['P4', 'P3', 'T6', 'P1', 'P2'],['P4', 'P3', 'P1', 'P2'],['P3', 'P4', 'P1', 'P2', 'P6'],['P3', 'P4', 'P1', 'P2'],['Fc1', 'Cp1', 'P4', 'P3', 'F2', 'P2', 'P1', 'P6', 'C2']]
bads6 = [['Cp6', 'Fcz', 'Oz', 'PO3', 'FT8', 'T6', 'Fz'],['Fz', 'F4', 'Cp6', 'Fcz', 'FT8', 'PO3', 'Oz'],['Fz', 'F4', 'Cp2', 'Cp6', 'Fcz', 'Oz', 'FT8', 'TP8', 'PO3'],['F4', 'Cp2', 'Cp6', 'Fcz', 'TP8', 'FT8', 'Oz', 'Fz'],['F4', 'Fz', 'Cp2', 'Cp6', 'P4', 'Fcz', 'TP8', 'FT8', 'Oz', 'C4'],['Fz', 'F4', 'Cp6', 'C4', 'T6', 'O1', 'P4', 'Pz', 'FT8', 'Fcz', 'C6', 'TP8', 'Oz'],['Fz', 'F4', 'Fc6', 'C3', 'C4', 'Cp6', 'O1', 'P4', 'Pz', 'F2', 'Fcz', 'FT8', 'TP8', 'PO4', 'Oz', 'O2'],['Fp1', 'Fz', 'Fc6', 'C3', 'C4', 'Cp6', 'P4', 'Fcz', 'O1', 'O2', 'FT8', 'TP8', 'PO4', 'Oz', 'F4', 'Fc5']]
bads7 = [['F4'],['F4', 'Pz', 'FT8', 'C2'],['F4', 'T4', 'Cp6', 'FT8', 'C2'],['F4', 'FT8', 'C2'],['F4', 'Pz', 'FT8', 'F6'],['F4', 'Pz', 'O2', 'F6', 'AF3', 'Fpz', 'O1', 'FT7', 'FC4', 'FT8', 'C2'],['F4', 'Pz', 'T5', 'F6', 'C6'],['F4', 'Pz', 'F6', 'C6', 'FT8']]
bads8 = [['C4', 'T4', 'C3', 'T3', 'Cp6', 'Cp2', 'O1', 'T6', 'P4', 'P3', 'T5', 'C5', 'C6', 'Cpz', 'TP8', 'P5', 'P1', 'P2', 'PO3', 'Poz', 'PO4'],['T3', 'C3', 'C4', 'T4', 'Cp2', 'Cp6', 'O1', 'T5', 'P3', 'P4', 'T6', 'C5', 'C6', 'Cpz', 'TP8', 'P5', 'P2', 'P1', 'PO3', 'Poz', 'PO4'],['F4', 'T3', 'C3', 'C4', 'T4', 'Cp2', 'Cp6', 'T6', 'P4', 'T5', 'C5', 'C6', 'Cpz', 'TP8', 'P1', 'P5', 'PO3', 'P6', 'P2'],['F4', 'T3', 'C3', 'C4', 'T4', 'Cp2', 'Cp6', 'P4', 'T6', 'T5', 'C5', 'C6', 'Cpz', 'TP8', 'P5', 'P1', 'P2', 'P6', 'PO3'],['F4', 'T3', 'C3', 'C4', 'T4', 'Cp2', 'Cp6', 'T6', 'P4', 'T5', 'C6', 'C5', 'Cpz', 'TP8', 'P5', 'P1', 'P2', 'P6', 'PO3'],['F4', 'T3', 'C3', 'C4', 'T4', 'Cp2', 'Cp6', 'P4', 'T5', 'T6', 'C5', 'C6', 'Cpz', 'TP8', 'P1', 'P2', 'P5', 'P6', 'PO3', 'Oz'],['F4', 'T3', 'C3', 'C4', 'T4', 'Cp2', 'Cp6', 'Cp5', 'T6', 'P4', 'T5', 'C5', 'C6', 'TP8', 'P1', 'P5', 'P2', 'P6', 'PO3', 'Cpz'],['F4', 'T3', 'Fc5', 'T4', 'C3', 'C4', 'Cp2', 'Cp6', 'P4', 'T5', 'T6', 'C5', 'C6', 'CP3', 'Cpz', 'P5', 'TP8', 'P1', 'P2', 'P6', 'PO3', 'Oz']]
bads9 = [['C2'],['F3', 'Pz', 'C6'],['F3', 'C6', 'FC4'],['F3', 'Fc6', 'C3', 'Afz', 'AF4', 'C6'],['F3', 'T5', 'Afz', 'AF4'],['F3', 'Cp2', 'Afz', 'AF4', 'T5'],['C3', 'F3', 'Cp2', 'Afz', 'T5', 'AF4', 'C6', 'CP4'],['F3', 'C3', 'Cp2', 'Afz', 'AF4', 'T5', 'C6', 'CP4']]

bads = [bads0,bads1,bads2,bads3,bads4,bads5,bads6,bads7,bads8,bads9]
mont = mne.channels.make_standard_montage('standard_1020')
KiaranC,ZedC,ZedW,BiancaC,SamC,JosepC,KiaranW,DanielW,ZoeW,DanielC = [],[],[],[],[],[],[],[],[],[]
Name = [KiaranC,ZedC,ZedW,BiancaC,SamC,JosepC,KiaranW,DanielW,ZoeW,DanielC]

for file in sorted(glob.glob('/Users/Ha-Jun/PhD/Data/Oddball/Data/Start/0404_Kiaran/*.EDF')):
    KiaranC.append(file)
for file in sorted(glob.glob('/Users/Ha-Jun/PhD/Data/Oddball/Data/Start/0404_Zed/*.EDF')):
    ZedC.append(file)
for file in sorted(glob.glob('/Users/Ha-Jun/PhD/Data/Oddball/Data/Start/0504_Zed/*.EDF')):
    ZedW.append(file)
for file in sorted(glob.glob('/Users/Ha-Jun/PhD/Data/Oddball/Data/Start/0604_Bianca/*.EDF')):
    BiancaC.append(file)
for file in sorted(glob.glob('/Users/Ha-Jun/PhD/Data/Oddball/Data/Start/0604_Sam/*.EDF')):
    SamC.append(file)
for file in sorted(glob.glob('/Users/Ha-Jun/PhD/Data/Oddball/Data/Start/0804_Joseph/*.EDF')):
    JosepC.append(file)
for file in sorted(glob.glob('/Users/Ha-Jun/PhD/Data/Oddball/Data/Start/1104_Kiaran/*.EDF')):
    KiaranW.append(file)
for file in sorted(glob.glob('/Users/Ha-Jun/PhD/Data/Oddball/Data/Start/1204_Daniel/*.EDF')):
    DanielW.append(file)
for file in sorted(glob.glob('/Users/Ha-Jun/PhD/Data/Oddball/Data/Start/1204_Zoe/*.EDF')):
    ZoeW.append(file)
for file in sorted(glob.glob('/Users/Ha-Jun/PhD/Data/Oddball/Data/Start/1304_Daniel/*.EDF')):
    DanielC.append(file)

low_freq = 0.1
high_freq = 30
Blocks = [[],[],[],[],[],[],[],[],[],[]]
for i in range(len(Name)):
    mini_blocks = [[],[],[],[],[],[],[],[]]
    for j in range(8):
        mini_blocks[j] = mne.io.read_raw_edf(Name[i][j], infer_types = True, exclude=('DIG DTRIG',), preload = True)
        mini_blocks[j].set_montage(mont,match_case = False, match_alias = True, on_missing = 'ignore')
        mini_blocks[j].info['bads'].extend(bads[i][j])
        mini_blocks[j].interpolate_bads(reset_bads = True, exclude = ['REF_EEG REF_EEG','Fpz','AF3'])
        mini_blocks[j].filter(low_freq, high_freq, n_jobs = 1)
        # mini_blocks[j].notch_filter(freqs = np.arange(10,46,10),notch_widths = 2)
        mini_blocks[j].notch_filter(freqs = np.arange(50,351,50))
        # mini_blocks[j].set_eeg_reference(ref_channels = ['REF_EEG REF_EEG'])
        # mini_blocks[j].set_eeg_reference(ref_channels = 'average')
        mini_blocks[j].save('/Users/Ha-Jun/PhD/Data/Oddball/Data/Start/mini(no_re-reference)/mini{}{}_eeg.fif'.format(i,j), overwrite=True)
    Blocks[i] = mini_blocks

#%% re-reference using average 
import numpy as np
import matplotlib.pyplot as plt

import pandas as pd
import mne
import os
import glob

Blocks = [[],[],[],[],[],[],[],[],[],[]]
for i in range(10):
    mini_blocks = [[],[],[],[],[],[],[],[]]
    for j in range(8):
        mini_blocks[j] = mne.io.read_raw_fif('/Users/Ha-Jun/PhD/Data/Oddball/Data/Start/mini/mini{}{}_eeg.fif'.format(i,j))
    Blocks[i] = mini_blocks

#%% no re-reference 
import numpy as np
import matplotlib.pyplot as plt

import pandas as pd
import mne
import os
import glob

Blocks = [[],[],[],[],[],[],[],[],[],[]]
for i in range(10):
    mini_blocks = [[],[],[],[],[],[],[],[]]
    for j in range(8):
        mini_blocks[j] = mne.io.read_raw_fif('/Users/Ha-Jun/PhD/Data/Oddball/Data/Start/mini(no_re-reference)/mini{}{}_eeg.fif'.format(i,j))
    Blocks[i] = mini_blocks
#%%
audio_length = 58.53061224489796
tmin0 = [121.5313,86.7081,128.0283,138.0225,145.5996,199.8594,123.7383,131.3086]
tmin1 = [117.0869,132.1318,117.9798,114.0244, 112.3867,111.0732,135.8975,129.3584]
tmin2 = [100.8984,114.7402,112.7031,100.7158,95.82617,104.1787,92.60254,129.8699]
tmin3 = [118.2549,138.7266,147.4556,131.6523,134.0215,165.0205,152.6768,158.624]
tmin4 = [127.1689,122.5322,124.9473,133.8721,140.6592,101.54,143.585,213.3066]
tmin5 = [126.209,138.3096,120.2705,107.252,117.6836,142.5889,140.2363,122.9834]
tmin6 = [179.4463,153.2422,154.9121,107.6494,125.0986,182.4375,119.3086,126.6797]
tmin7 = [124.6582,148.2725,201.3896,128.0654,186.3418,151.9609,144.6358,147.7803]
tmin8 = [149.4209,148.8867,151.4492,184.126,150.2764,150.5879,146.7744,151.7402]
tmin9 = [122.6797,185.4026,146.2402,128.4736,176.2256,242.7168,182.7246,198.8857]


tmin = [tmin0,tmin1,tmin2,tmin3,tmin4,tmin5,tmin6,tmin7,tmin8,tmin9]
tmin = np.add(tmin, 0.5)

tmax = np.add(tmin,audio_length)

duration_event = 1.3006802721088435
duration_epoch = 2
events = [[[],[],[],[],[],[],[],[]],
          [[],[],[],[],[],[],[],[]],
          [[],[],[],[],[],[],[],[]],
          [[],[],[],[],[],[],[],[]],
          [[],[],[],[],[],[],[],[]],
          [[],[],[],[],[],[],[],[]],
          [[],[],[],[],[],[],[],[]],
          [[],[],[],[],[],[],[],[]],
          [[],[],[],[],[],[],[],[]],
          [[],[],[],[],[],[],[],[]]]
epochs = events.copy()
evoked = events.copy()
picks = ('Fc1','Fc2', 'Fz','Fcz')
for i in range(len(Blocks)):
    for j in range(8):
        events[i][j] = mne.make_fixed_length_events(Blocks[i][j], start = tmin[i][j], stop = tmax[i][j], duration = duration_event)
        epochs[i][j] = mne.Epochs(Blocks[i][j],events[i][j], preload = True, tmin = -0.2 , tmax = duration_event+0.5, baseline = None, picks = picks)
        # evoked[i][j] = epochs[i][j].copy().average()
        

ML1 = [15,17,24,27,28,33,35,37,44]
MM1 = []
for i in range(15,45):
    if i not in ML1:
        MM1.append(i)

MR2 = [15,19,20,26,27,33,35,39,40] 
MM2 = []
for i in range(15,45):
    if i not in MR2:
        MM2.append(i)
        
MM3 = [16,19,23,26,27,33,36,39,43] 
ML3 = []
for i in range(15,45):
    if i not in MM3:
        ML3.append(i)

MR4 = [15,20,22,26,28,33,35,40,42]
ML4 = []
for i in range(15,45):
    if i not in MR4:
        ML4.append(i)

MM5 = [16,18,22,27,30,33,36,38,42]
MR5 = []
for i in range(15,45):
    if i not in MM5:
        MR5.append(i)



ML_Epoch_RC = mne.concatenate_epochs((epochs[1][0][ML3], epochs[1][2][ML1], epochs[1][4][MR2], epochs[1][6][ML3],
                                      epochs[3][0][MR2], epochs[3][3][ML1], epochs[3][4][ML3], epochs[3][7][MR2], 
                                      epochs[4][0][ML4], epochs[4][0][MR4], epochs[4][3][ML1], epochs[4][4][MR5], epochs[4][7][ML4], epochs[4][7][MR4], 
                                      epochs[5][0][ML1], epochs[5][1][MR5], epochs[5][4][ML4], epochs[5][4][MR4], epochs[5][5][ML1], 
                                      epochs[9][1][MR5], epochs[9][3][ML4], epochs[9][3][MR4], epochs[9][5][ML1], epochs[9][7][MR5]))

MM_Epoch_RC = mne.concatenate_epochs((epochs[1][0][MM3], epochs[1][2][MM1], epochs[1][4][MM2], epochs[1][6][MM3],
                                      epochs[3][0][MM2], epochs[3][3][MM1], epochs[3][4][MM3], epochs[3][7][MM2], 
                                      epochs[4][3][MM1], epochs[4][4][MM5], 
                                      epochs[5][0][MM1], epochs[5][1][MM5], epochs[5][5][MM1], 
                                      epochs[9][1][MM5], epochs[9][5][MM1], epochs[9][7][MM5]))

ML_Epoch_LC = mne.concatenate_epochs((epochs[1][1][MR2], epochs[1][3][ML3], epochs[1][5][ML1], epochs[1][7][MR2], epochs[3][1][ML3], epochs[3][2][ML1], epochs[3][5][MR2], epochs[3][6][ML3], epochs[4][1][MR5], epochs[4][2][ML1], epochs[4][5][ML4], epochs[4][6][MR5], epochs[4][5][MR4], epochs[5][2][MR4], epochs[5][2][ML4], epochs[5][3][MR5], epochs[5][6][ML1], epochs[5][7][ML4], epochs[5][7][MR4], epochs[9][0][MR4], epochs[9][0][ML4], epochs[9][2][ML1], epochs[9][4][MR5], epochs[9][6][ML4], epochs[9][6][MR4]))
MM_Epoch_LC = mne.concatenate_epochs((epochs[1][1][MM2], epochs[1][3][MM3], epochs[1][5][MM1], epochs[1][7][MM2], epochs[3][1][MM3], epochs[3][2][MM1], epochs[3][5][MM2], epochs[3][6][MM3], epochs[4][1][MM5], epochs[4][2][MM1], epochs[4][6][MM5], epochs[5][3][MM5], epochs[5][6][MM1], epochs[9][2][MM1], epochs[9][4][MM5]))

ML_Epoch_RW = mne.concatenate_epochs((epochs[2][0][MR2], epochs[2][3][ML3], epochs[2][4][ML1], epochs[2][7][MR2], epochs[7][0][ML4], epochs[7][0][MR4], epochs[7][1][ML1], epochs[7][4][MR5], epochs[7][5][ML4], epochs[7][5][MR4], epochs[8][0][MR5], epochs[8][1][MR4], epochs[8][1][ML4], epochs[8][4][ML1], epochs[8][5][MR5]))
MM_Epoch_RW = mne.concatenate_epochs((epochs[2][0][MM2], epochs[2][3][MM3], epochs[2][4][MM1], epochs[2][7][MM2], epochs[7][1][MM1], epochs[7][4][MM5], epochs[8][0][MM5], epochs[8][4][MM1], epochs[8][5][MM5]))

ML_Epoch_LW = mne.concatenate_epochs((epochs[2][1][ML1], epochs[2][2][ML3], epochs[2][5][MR2], epochs[2][6][ML1], epochs[7][2][MR5], epochs[7][3][ML1], epochs[7][6][ML4], epochs[7][6][MR4], epochs[7][7][MR5], epochs[8][2][ML1], epochs[8][3][ML4], epochs[8][3][MR4], epochs[8][6][MR5], epochs[8][7][ML1]))
MM_Epoch_LW = mne.concatenate_epochs((epochs[2][1][MM1], epochs[2][2][MM3], epochs[2][5][MM2], epochs[2][6][MM1], epochs[7][2][MM5], epochs[7][3][MM1], epochs[7][7][MM5], epochs[8][2][MM1], epochs[8][6][MM5], epochs[8][7][MM1]))



# ML_Epoch_RC = mne.concatenate_epochs((epochs[4][0][ML4], epochs[4][0][MR4], epochs[4][3][ML1], epochs[4][4][MR5], epochs[4][7][ML4], epochs[4][7][MR4], 
#                                       epochs[5][0][ML1], epochs[5][1][MR5], epochs[5][4][ML4], epochs[5][4][MR4], epochs[5][5][ML1], 
#                                       ))

# MM_Epoch_RC = mne.concatenate_epochs((
#                                       epochs[4][3][MM1], epochs[4][4][MM5], 
#                                       epochs[5][0][MM1], epochs[5][1][MM5], epochs[5][5][MM1], 
#                                       ))

# ML_Epoch_LC = mne.concatenate_epochs((epochs[4][1][MR5], epochs[4][2][ML1], epochs[4][5][ML4], epochs[4][6][MR5], epochs[4][5][MR4], epochs[5][2][MR4], epochs[5][2][ML4], epochs[5][3][MR5], epochs[5][6][ML1], epochs[5][7][ML4], epochs[5][7][MR4]))
# MM_Epoch_LC = mne.concatenate_epochs((epochs[4][1][MM5], epochs[4][2][MM1], epochs[4][6][MM5], epochs[5][3][MM5], epochs[5][6][MM1]))




# ML_Epoch_RC = mne.concatenate_epochs((epochs[1][0][ML3], epochs[1][2][ML1], epochs[1][4][MR2], epochs[1][6][ML3],
#                                       epochs[3][0][MR2], epochs[3][3][ML1], epochs[3][4][ML3], epochs[3][7][MR2]))

# MM_Epoch_RC = mne.concatenate_epochs((epochs[1][0][MM3], epochs[1][2][MM1], epochs[1][4][MM2], epochs[1][6][MM3],
#                                       epochs[3][0][MM2], epochs[3][3][MM1], epochs[3][4][MM3], epochs[3][7][MM2]))

# ML_Epoch_LC = mne.concatenate_epochs((epochs[1][1][MR2], epochs[1][3][ML3], epochs[1][5][ML1], epochs[1][7][MR2], epochs[3][1][ML3], epochs[3][2][ML1], epochs[3][5][MR2], epochs[3][6][ML3]))
# MM_Epoch_LC = mne.concatenate_epochs((epochs[1][1][MM2], epochs[1][3][MM3], epochs[1][5][MM1], epochs[1][7][MM2], epochs[3][1][MM3], epochs[3][2][MM1], epochs[3][5][MM2], epochs[3][6][MM3]))



# ML_Epoch_RW = mne.concatenate_epochs((epochs[2][0][MR2], epochs[2][3][ML3], epochs[2][4][ML1], epochs[2][7][MR2], epochs[7][0][ML4], epochs[7][0][MR4], epochs[7][1][ML1], epochs[7][4][MR5], epochs[7][5][ML4], epochs[7][5][MR4], epochs[8][0][MR5], epochs[8][1][MR4], epochs[8][1][ML4], epochs[8][4][ML1], epochs[8][5][MR5]))
# MM_Epoch_RW = mne.concatenate_epochs((epochs[2][0][MM2], epochs[2][3][MM3], epochs[2][4][MM1], epochs[2][7][MM2], epochs[7][1][MM1], epochs[7][4][MM5], epochs[8][0][MM5], epochs[8][4][MM1], epochs[8][5][MM5]))

# ML_Epoch_LW = mne.concatenate_epochs((epochs[2][1][ML1], epochs[2][2][ML3], epochs[2][5][MR2], epochs[2][6][ML1], epochs[7][2][MR5], epochs[7][3][ML1], epochs[7][6][ML4], epochs[7][6][MR4], epochs[7][7][MR5], epochs[8][2][ML1], epochs[8][3][ML4], epochs[8][3][MR4], epochs[8][6][MR5], epochs[8][7][ML1]))
# MM_Epoch_LW = mne.concatenate_epochs((epochs[2][1][MM1], epochs[2][2][MM3], epochs[2][5][MM2], epochs[2][6][MM1], epochs[7][2][MM5], epochs[7][3][MM1], epochs[7][7][MM5], epochs[8][2][MM1], epochs[8][6][MM5], epochs[8][7][MM1]))


A = []
for i in range(500):
    if i%2 ==1:
        A.append(i)
#        
# ML_Epoch = ML_Epoch_RC
# MM_Epoch = MM_Epoch_RC

ML_Epoch = ML_Epoch_LC
MM_Epoch = MM_Epoch_LC

# ML_Epoch = mne.concatenate_epochs((ML_Epoch_LC,ML_Epoch_RC))
# MM_Epoch = mne.concatenate_epochs((MM_Epoch_LC,MM_Epoch_RC))

A,B = len(ML_Epoch),len(MM_Epoch)

reject = dict(eeg = 120e-6)

# ML_Epoch.apply_baseline((0.4,0.6))
# MM_Epoch.apply_baseline((0.4,0.6))

ML_Epoch.drop_bad(reject = reject)
MM_Epoch.drop_bad(reject = reject)


print(A,len(ML_Epoch),B,len(MM_Epoch))


ML_Evoked = ML_Epoch.average()
MM_Evoked = MM_Epoch.average()

dif = MM_Evoked.copy()
dif.data = ML_Evoked.data - MM_Evoked.data

# mne.viz.plot_compare_evokeds(dict(MM = MM_Evoked, MLMR = ML_Evoked),colors = ['blue','red'],
#                             legend='upper left', show_sensors='upper right'
#                             ,combine = 'mean',title = 'MMN, RC',vlines = [0.6])

mne.viz.plot_compare_evokeds(dict(MM = MM_Evoked, MLMR = ML_Evoked),colors = ['blue','red'],
                            legend='upper left', show_sensors='upper right'
                            ,combine = 'mean',title = 'MMN, RC,{}'.format(picks),vlines = [0.6])
#%%

from mne.preprocessing import (ICA, create_eog_epochs, create_ecg_epochs,
                               corrmap)

MM = ML_Epoch.copy()
filt_raw = MM.copy().filter(l_freq=1., h_freq=None,fir_design = 'firwin')
ica = ICA(n_components=15, max_iter='auto', random_state=97).fit(filt_raw)


# ica.fit(filt_raw)
# ica


#%%
#Omit Kiraran


#zed (1)
RC
ML : epochs[1][0][ML3],  epochs[1][2][ML1], epochs[1][4][MR2], epochs[1][6][ML3]
MM : epochs[1][0][MM3],  epochs[1][2][MM1], epochs[1][4][MM2], epochs[1][6][MM3]

LC
ML : epochs[1][1][MR2], epochs[1][3][ML3], epochs[1][5][ML1], epochs[1][7][MR2]
MM : epochs[1][1][MM2], epochs[1][3][MM3], epochs[1][5][MM1], epochs[1][7][MM2]

#zed (2)
RW
ML : epochs[2][0][MR2],  epochs[2][3][ML3], epochs[2][4][ML1], epochs[2][7][MR2]
MM : epochs[2][0][MM2],  epochs[2][3][MM3], epochs[2][4][MM1], epochs[2][7][MM2]

LW
ML : epochs[2][1][ML1], epochs[2][2][ML3], epochs[2][5][MR2], epochs[2][6][ML1]
MM : epochs[2][1][MM1], epochs[2][2][MM3], epochs[2][5][MM2], epochs[2][6][MM1]

#bianca (3)
RC
ML : epochs[3][0][MR2],  epochs[3][3][ML1], epochs[3][4][ML3], epochs[3][7][MR2]
MM : epochs[3][0][MM2],  epochs[3][3][MM1], epochs[3][4][MM3], epochs[3][7][MM2]

LC
ML : epochs[3][1][ML3], epochs[3][2][ML1], epochs[3][5][MR2], epochs[3][6][ML3]
MM : epochs[3][1][MM3], epochs[3][2][MM1], epochs[3][5][MM2], epochs[3][6][MM3]

#Sam (4)
RC
ML : epochs[4][0][ML4],  epochs[4][0][MR4],  epochs[4][3][ML1], epochs[4][4][MR5], epochs[4][7][ML4] epochs[4][7][MR4]
MM : epochs[4][3][MM1],  epochs[4][4][MM5]

LC
ML : epochs[4][1][MR5], epochs[4][2][ML1], epochs[4][5][ML4], epochs[4][6][MR5],  epochs[4][5][MR4]
MM : epochs[4][1][MM5], epochs[4][2][MM1], epochs[4][6][MM5]


#Joseph (5)
RC
ML : epochs[5][0][ML1],  epochs[5][1][MR5], epochs[5][4][ML4],epochs[5][4][MR4], epochs[5][5][ML1]
MM : epochs[5][0][MM1],  epochs[5][1][MM5], epochs[5][5][MM1]

LC
ML : epochs[5][2][MR4], epochs[5][2][ML4] epochs[5][3][MR5], epochs[5][6][ML1], epochs[5][7][ML4], epochs[5][7][MR4]
MM : epochs[5][3][MM5], epochs[5][6][MM1]


#Daniel (7)
RW
ML : epochs[7][0][ML4],epochs[7][0][MR4],epochs[7][1][ML1],epochs[7][4][MR5],epochs[7][5][ML4],epochs[7][5][MR4]
MM : epochs[7][1][MM1],epochs[7][4][MM5]

LW
ML : epochs[7][2][MR5],epochs[7][3][ML1],epochs[7][6][ML4],epochs[7][6][MR4],epochs[7][7][MR5]
MM : epochs[7][2][MM5],epochs[7][3][MM1],epochs[7][7][MM5]

#Zoe (8)

RW
ML : epochs[8][0][MR5],epochs[8][1][MR4],epochs[8][1][ML4],epochs[8][4][ML1],epochs[8][5][MR5]
MM : epochs[8][0][MM5],epochs[8][4][MM1],epochs[8][5][MM5]

LW
ML : epochs[8][2][ML1],epochs[8][3][ML4],epochs[8][3][MR4],epochs[8][6][MR5],epochs[8][7][ML1]
MM : epochs[8][2][MM1],epochs[8][6][MM5],epochs[8][7][MM1]

#Daniel (9)
RC
ML : epochs[9][1][MR5],epochs[9][3][ML4],epochs[9][3][MR4],epochs[9][5][ML1],epochs[9][7][MR5]
MM : epochs[9][1][MM5],epochs[9][5][MM1],epochs[9][7][MM5]
    
LC
ML : epochs[9][0][MR4],epochs[9][0][ML4],epochs[9][2][ML1], epochs[9][4][MR5],epochs[9][6][ML4],epochs[9][6][MR4]
MM : epochs[9][2][MM1],epochs[9][4][MM5]
    

#%% Baseline
import numpy as np
import matplotlib.pyplot as plt

import pandas as pd
import mne
import os
import glob

bads0 = ['C3', 'Cp5', 'FT7', 'Afz', 'AF3', 'Fpz', 'PO3', 'C2', 'P5']
bads1 = ['Cp5', 'C3', 'T3', 'T6','Afz','Fpz', 'AF3', 'FT7', 'PO3', 'C2', 'C1', 'P5']
bads2 = ['C3', 'Cp5', 'Afz', 'AF3', 'Fpz', 'FT7', 'PO3', 'P5', 'C1', 'C2']
bads3 = ['Fpz', 'AF3']
bads4 = ['T3', 'Fc6', 'Cp5', 'F8', 'T5', 'T6', 'Fcz', 'C5', 'P5', 'O2', 'Fpz', 'AF3']
bads5 = ['T4', 'Cp6', 'Fpz', 'AF3', 'P2', 'P1', 'P6', 'TP7', 'P4', 'P3', 'T6']
bads6 = ['Fz', 'F4', 'F8', 'C4', 'C3', 'Cp2', 'Cp6', 'Cp1', 'F2', 'Fcz', 'PO3', 'P6', 'Oz', 'C6', 'C2', 'FT8', 'P4', 'O1', 'AF3', 'Fpz', 'T6', 'O2']
bads7 = ['Cp2', 'C4', 'Fpz', 'AF3', 'FT7', 'FC4', 'O1', 'O2', 'P3', 'Oz', 'FT8', 'Fc1', 'F4', 'Fcz']
bads8 = ['F8', 'T3', 'C3', 'C4', 'T4', 'Cp6', 'Cp2', 'O1', 'O2', 'Fpz', 'AF3', 'C5', 'Cpz', 'P1', 'P2', 'Poz', 'PO4', 'C6', 'CP3', 'Fc5', 'FC3', 'T6', 'Pz', 'P4', 'T5', 'P3', 'TP8', 'P5', 'PO3']
bads = [bads0,bads1,bads2,bads3,bads4,bads5,bads6,bads7,bads8]
mont = mne.channels.make_standard_montage('standard_1020')
Zed,Bianca,Sam,Josep,Kiaran,Daniel,Zoe = [],[],[],[],[],[],[]

Name = []
for file in sorted(glob.glob('/Users/Ha-Jun/PhD/Data/Oddball/Data/Start/0404_Zed/Baseline/*.EDF')):
    Name += [file]
for file in sorted(glob.glob('/Users/Ha-Jun/PhD/Data/Oddball/Data/Start/0604_Bianca/Baseline/*.EDF')):
    Name.append(file)
for file in sorted(glob.glob('/Users/Ha-Jun/PhD/Data/Oddball/Data/Start/0604_Sam/Baseline/*.EDF')):
    Name.append(file)
for file in sorted(glob.glob('/Users/Ha-Jun/PhD/Data/Oddball/Data/Start/0804_Joseph/Baseline/*.EDF')):
    Name.append(file)
for file in sorted(glob.glob('/Users/Ha-Jun/PhD/Data/Oddball/Data/Start/1104_Kiaran/Baseline/*.EDF')):
    Name.append(file)
for file in sorted(glob.glob('/Users/Ha-Jun/PhD/Data/Oddball/Data/Start/1204_Daniel/Baseline/*.EDF')):
    Name.append(file)
for file in sorted(glob.glob('/Users/Ha-Jun/PhD/Data/Oddball/Data/Start/1204_Zoe/Baseline/*.EDF')):
    Name.append(file)
#Zoe and Daniel are bad

low_freq = 0.1
high_freq = 30
Blocks = [[],[],[],[],[],[],[],[],[]]
for i in range(len(Name)):
    Blocks[i] = mne.io.read_raw_edf(Name[i],infer_types = True, exclude=('DIG DTRIG',), preload = True)
    Blocks[i].set_montage(mont,match_case = False, match_alias = True, on_missing = 'ignore')
    # Blocks[i].info['bads'].extend(bads[i])
    # Blocks[i].interpolate_bads(reset_bads = True, exclude = ['REF_EEG REF_EEG','Fpz','AF3'])
    Blocks[i].filter(low_freq, high_freq, n_jobs = 1)
    # mini_blocks[j].notch_filter(freqs = np.arange(10,46,10),notch_widths = 2)
    Blocks[i].notch_filter(freqs = np.arange(50,351,50))
    # Blocks[i].set_eeg_reference(ref_channels = ['REF_EEG REF_EEG'])
    # Blocks[i].set_eeg_reference(ref_channels = 'average')
    # Blocks[i].save('/Users/Ha-Jun/PhD/Data/Oddball/Data/Start/Baseline/mini{}_eeg.fif'.format(i), overwrite=True)
#%%

audio_length = 58.53061224489796

tmin0 = 37.34375 +0.5
tmin1 = 20.34863+0.5
tmin2 = 22.02832+0.5

tmin3 = 22.31836+0.5
tmin4 = 104.0547+0.5
tmin5 = 178.8711+0.5

tmin6 = 20.8125+0.5
tmin7 = 102.2207+0.5
tmin8 = 196.8135+0.5

tmin9 = 19.66211+0.5
tmin10 = 100.2715+0.5
tmin11 = 199.6504+0.5

tmin12 = 19.75+0.5
tmin13 = 93.41504+0.5
tmin14 = 166.5078+0.5

tmin15 = 21.80469+0.5
tmin16 = 103.4248+0.5
tmin17 = 173.0166+0.5

tmin18 = 95.42285+0.5
tmin19 = 168.3936+0.5
tmin20 = 240.5811+0.5

duration_event = 1.3006802721088435
duration_epoch = 2
events = [[[],[],[],[],[],[],[],[]],
          [[],[],[],[],[],[],[],[]],
          [[],[],[],[],[],[],[],[]],
          [[],[],[],[],[],[],[],[]],
          [[],[],[],[],[],[],[],[]],
          [[],[],[],[],[],[],[],[]],
          [[],[],[],[],[],[],[],[]],
          [[],[],[],[],[],[],[],[]],
          [[],[],[],[],[],[],[],[]],
          [[],[],[],[],[],[],[],[]]]
epochs = events.copy()
evoked = events.copy()

picks = ('Fc1','Fc2') # 'Fz','Fcz',

events0 = mne.make_fixed_length_events(Blocks[0], start = tmin0, stop = tmin0 + audio_length, duration = duration_event)
events1 = mne.make_fixed_length_events(Blocks[1], start = tmin1, stop = tmin1 + audio_length, duration = duration_event)
events2 = mne.make_fixed_length_events(Blocks[2], start = tmin2, stop = tmin2 + audio_length, duration = duration_event)
events3 = mne.make_fixed_length_events(Blocks[3], start = tmin3, stop = tmin3 + audio_length, duration = duration_event)
events4 = mne.make_fixed_length_events(Blocks[3], start = tmin4, stop = tmin4 + audio_length, duration = duration_event)
events5 = mne.make_fixed_length_events(Blocks[3], start = tmin5, stop = tmin5 + audio_length, duration = duration_event)
events6 = mne.make_fixed_length_events(Blocks[4], start = tmin6, stop = tmin6 + audio_length, duration = duration_event)
events7 = mne.make_fixed_length_events(Blocks[4], start = tmin7, stop = tmin7 + audio_length, duration = duration_event)
events8 = mne.make_fixed_length_events(Blocks[4], start = tmin8, stop = tmin8 + audio_length, duration = duration_event)
events9 = mne.make_fixed_length_events(Blocks[5], start = tmin9, stop = tmin9 + audio_length, duration = duration_event)
events10 = mne.make_fixed_length_events(Blocks[5], start = tmin10, stop = tmin10 + audio_length, duration = duration_event)
events11 = mne.make_fixed_length_events(Blocks[5], start = tmin11, stop = tmin11 + audio_length, duration = duration_event)
events12 = mne.make_fixed_length_events(Blocks[6], start = tmin12, stop = tmin12 + audio_length, duration = duration_event)
events13 = mne.make_fixed_length_events(Blocks[6], start = tmin13, stop = tmin13 + audio_length, duration = duration_event)
events14 = mne.make_fixed_length_events(Blocks[6], start = tmin14, stop = tmin14 + audio_length, duration = duration_event)
events15 = mne.make_fixed_length_events(Blocks[7], start = tmin15, stop = tmin15 + audio_length, duration = duration_event)
events16 = mne.make_fixed_length_events(Blocks[7], start = tmin16, stop = tmin16 + audio_length, duration = duration_event)
events17 = mne.make_fixed_length_events(Blocks[7], start = tmin17, stop = tmin17 + audio_length, duration = duration_event)
events18 = mne.make_fixed_length_events(Blocks[8], start = tmin18, stop = tmin18 + audio_length, duration = duration_event)
events19 = mne.make_fixed_length_events(Blocks[8], start = tmin19, stop = tmin19 + audio_length, duration = duration_event)
events20 = mne.make_fixed_length_events(Blocks[8], start = tmin20, stop = tmin20 + audio_length, duration = duration_event)

epochs0 = mne.Epochs(Blocks[0],events0, preload = True, tmin = -0.2 , tmax = duration_event+0.5, baseline = None, picks = picks)
epochs1 = mne.Epochs(Blocks[1],events1, preload = True, tmin = -0.2 , tmax = duration_event+0.5, baseline = None, picks = picks)
epochs2 = mne.Epochs(Blocks[2],events2, preload = True, tmin = -0.2 , tmax = duration_event+0.5, baseline = None, picks = picks)
epochs3 = mne.Epochs(Blocks[3],events3, preload = True, tmin = -0.2 , tmax = duration_event+0.5, baseline = None, picks = picks)
epochs4 = mne.Epochs(Blocks[3],events4, preload = True, tmin = -0.2 , tmax = duration_event+0.5, baseline = None, picks = picks)
epochs5 = mne.Epochs(Blocks[3],events5, preload = True, tmin = -0.2 , tmax = duration_event+0.5, baseline = None, picks = picks)
epochs6 = mne.Epochs(Blocks[4],events6, preload = True, tmin = -0.2 , tmax = duration_event+0.5, baseline = None, picks = picks)
epochs7 = mne.Epochs(Blocks[4],events7, preload = True, tmin = -0.2 , tmax = duration_event+0.5, baseline = None, picks = picks)
epochs8 = mne.Epochs(Blocks[4],events8, preload = True, tmin = -0.2 , tmax = duration_event+0.5, baseline = None, picks = picks)
epochs9 = mne.Epochs(Blocks[5],events9, preload = True, tmin = -0.2 , tmax = duration_event+0.5, baseline = None, picks = picks)
epochs10 = mne.Epochs(Blocks[5],events10, preload = True, tmin = -0.2 , tmax = duration_event+0.5, baseline = None, picks = picks)
epochs11 = mne.Epochs(Blocks[5],events11, preload = True, tmin = -0.2 , tmax = duration_event+0.5, baseline = None, picks = picks)
epochs12 = mne.Epochs(Blocks[6],events12, preload = True, tmin = -0.2 , tmax = duration_event+0.5, baseline = None, picks = picks)
epochs13 = mne.Epochs(Blocks[6],events13, preload = True, tmin = -0.2 , tmax = duration_event+0.5, baseline = None, picks = picks)
epochs14 = mne.Epochs(Blocks[6],events14, preload = True, tmin = -0.2 , tmax = duration_event+0.5, baseline = None, picks = picks)
epochs15 = mne.Epochs(Blocks[7],events15, preload = True, tmin = -0.2 , tmax = duration_event+0.5, baseline = None, picks = picks)
epochs16 = mne.Epochs(Blocks[7],events16, preload = True, tmin = -0.2 , tmax = duration_event+0.5, baseline = None, picks = picks)
epochs17 = mne.Epochs(Blocks[7],events17, preload = True, tmin = -0.2 , tmax = duration_event+0.5, baseline = None, picks = picks)
epochs18 = mne.Epochs(Blocks[8],events18, preload = True, tmin = -0.2 , tmax = duration_event+0.5, baseline = None, picks = picks)
epochs19 = mne.Epochs(Blocks[8],events19, preload = True, tmin = -0.2 , tmax = duration_event+0.5, baseline = None, picks = picks)
epochs20 = mne.Epochs(Blocks[8],events20, preload = True, tmin = -0.2 , tmax = duration_event+0.5, baseline = None, picks = picks)

# Block1 = (epochs0,epochs3,epochs6,epochs9,epochs12,epochs15,epochs20)
# Block2 = (epochs1,epochs4)
# Block3 = (epochs2,epochs5)
# Block4 = (epochs7,epochs10,epochs13,epochs16,epochs19)
# Block5 = (epochs8,epochs11,epochs14,epochs18,epochs17)

Block1 = (epochs3,epochs9,epochs12,epochs15,epochs20)
Block3 = (epochs2,epochs5)
Block4 = (epochs7,epochs10,epochs13,epochs16,epochs19)
Block5 = (epochs8,epochs11,epochs14,epochs18,epochs17)

ML1 = [15,17,24,27,28,33,35,37,44]
MM1 = []
for i in range(45):
    if i not in ML1:
        MM1.append(i)

MR2 = [15,19,20,26,27,33,35,39,40] 
MM2 = []
for i in range(45):
    if i not in MR2:
        MM2.append(i)
        
MM3 = [16,19,23,26,27,33,36,39,43] 
ML3 = []
for i in range(45):
    if i not in MM3:
        ML3.append(i)

MR4 = [15,20,22,26,28,33,35,40,42]
ML4 = []
for i in range(45):
    if i not in MR4:
        ML4.append(i)

MM5 = [16,18,22,27,30,33,36,38,42]
MR5 = []
for i in range(45):
    if i not in MM5:
        MR5.append(i)
        

# MM_Epoch = mne.concatenate_epochs((Block1[0][MM1],Block1[1][MM1],Block1[2][MM1],Block1[3][MM1],Block1[4][MM1],Block1[5][MM1],Block1[6][MM1],
#                                   Block2[0][MM2],Block2[1][MM2],
#                                   Block3[0][MM3],Block3[1][MM3],
#                                   Block5[0][MM5],Block5[1][MM5],Block5[2][MM5],Block5[3][MM5],Block5[4][MM5]))
    
  
# ML_Epoch = mne.concatenate_epochs((Block1[0][ML1],Block1[1][ML1],Block1[2][ML1],Block1[3][ML1],Block1[4][ML1],Block1[5][ML1],Block1[6][ML1],
#                                   Block2[0][MR2],Block2[1][MR2],
#                                   Block3[0][ML3],Block3[1][ML3],
#                                   Block4[0][ML4],Block4[1][ML4],Block4[2][ML4],Block4[3][ML4],Block4[4][ML4],
#                                   Block4[0][MR4],Block4[1][MR4],Block4[2][MR4],Block4[3][MR4],Block4[4][MR4],
#                                   Block5[0][MM5],Block5[1][MM5],Block5[2][MM5],Block5[3][MM5],Block5[4][MM5]))  

# below Zed, Sam, Kiaran removed 
MM_Epoch = mne.concatenate_epochs((Block1[0][MM1],Block1[1][MM1],Block1[2][MM1],Block1[3][MM1],Block1[4][MM1],
                                  Block3[0][MM3],
                                  Block5[0][MM5],Block5[1][MM5],Block5[2][MM5],Block5[3][MM5],Block5[4][MM5]))
    
  
ML_Epoch = mne.concatenate_epochs((Block1[0][ML1],Block1[1][ML1],Block1[2][ML1],Block1[3][ML1],Block1[4][ML1],
                                  Block3[0][ML3],
                                  Block4[0][ML4],Block4[1][ML4],Block4[2][ML4],Block4[3][ML4],Block4[4][ML4],
                                  Block4[0][MR4],Block4[1][MR4],Block4[2][MR4],Block4[3][MR4],Block4[4][MR4],
                                  Block5[0][MM5],Block5[1][MM5],Block5[2][MM5],Block5[3][MM5],Block5[4][MM5]))  


A,B = len(ML_Epoch),len(MM_Epoch)

reject = dict(eeg = 100e-6)

ML_Epoch.apply_baseline((0.4,0.6))
MM_Epoch.apply_baseline((0.4,0.6))

ML_Epoch.drop_bad(reject = reject)
MM_Epoch.drop_bad(reject = reject)


print(A,len(ML_Epoch),B,len(MM_Epoch))


ML_Evoked = ML_Epoch.average()
MM_Evoked = MM_Epoch.average()

dif = MM_Evoked.copy()
dif.data = ML_Evoked.data - MM_Evoked.data

# mne.viz.plot_compare_evokeds(dict(MM = MM_Evoked, MLMR = ML_Evoked),colors = ['blue','red'],
#                             legend='upper left', show_sensors='upper right'
#                             ,combine = 'mean',title = 'MMN, RC',vlines = [0.6])

mne.viz.plot_compare_evokeds(dict(MM = MM_Evoked, MLMR = ML_Evoked,Dif = dif),colors = ['blue','red','black'],
                            legend='upper left', show_sensors='upper right'
                            ,combine = 'mean',title = 'MMN, RC',vlines = [0.6])